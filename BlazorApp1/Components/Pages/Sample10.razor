@page "/Sample10"
@using BlazorApp1.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.ComponentModel.DataAnnotations;

@* アプリケーションサービス *@
@inject IDbContextFactory<PubsDbContext> DbFactory

<h3>Sample10 : データ入力検証</h3>

<EditForm Model="@vm" OnValidSubmit="@OnEditFormSubmitted">
    <fieldset disabled="@isFormDisabled">
        <DataAnnotationsValidator />
        <InputText @bind-Value="vm.Count" class="form-text" placeholder="表示する件数を入力してください" />
        <button type="submit">表示</button>
        <ValidationSummary />
    </fieldset>
</EditForm>

<hr />

<div>
    @if (authors.Count() != 0)
    {
        <AuthorsGrid Authors="@authors"></AuthorsGrid>
    }
    else
    {
        <span>データがありません。</span>
    }
</div>

@code {
    private IQueryable<Author> authors = new List<Author>().AsQueryable();
    private ViewModel vm = new ViewModel();
    private bool isFormDisabled = false;

    private async void OnEditFormSubmitted()
    {
        // フィルタ処理
        await using var pubs = DbFactory.CreateDbContext();
        int count = int.Parse(vm.Count); // このパース処理が失敗することはないので TryParse() は不要
        authors = (await pubs.Authors.OrderBy(a => a.AuthorId).Take(count).ToListAsync()).AsQueryable();
    }


    public class ViewModel
    {
        [Required(ErrorMessage = "件数を入力してください。")]
        [RegularExpression("[1-9]{1}[0-9]{0,}", ErrorMessage = "1以上の整数値を入力してください。")]
        public string Count { get; set; } = "";
    }
}
